# pretty standard, but optimistically precompiles assets

ln -s $DIR/shared/public/shared $RELEASE_DIR/public/shared

echo '
-----> Installing gems...'
rbenv exec bundle install --path $DIR/shared/bundle --without development test --deployment

# Ruby on Rails
if grep -q '^  rails' Gemfile.lock; then
  echo '
-----> Detected Rails app.'

  # Comment this out if you'd like to use the database.yml in your repo
  echo '
-----> Overwriting config/database.yml...'
  echo "%{environment}:
  adapter: %{database_adapter}
  url: <%= ENV['DATABASE_URL'] %>
  encoding: utf8
  pool: 50
" > config/database.yml


  echo '
-----> Overwriting config/cable.yml...'
  echo "%{environment}:
  adapter: redis
  url: <%= ENV['REDIS_URL'] %>
" > config/cable.yml

 if grep -q '^\s*config.api_only = true' config/application.rb; then
    : # Skip asset compilation for API only app
  else
    CURRENT_ASSETS_MD5=`find ${DIR}/current/app/assets -type f | sort | xargs md5sum | cut -c1-32 | md5sum | cut -c1-32`;
    CURRENT_FRONTEND_MD5=`find ${DIR}/current/app/javascript -type f | sort | xargs md5sum | cut -c1-32 | md5sum | cut -c1-32`;
    CURRENT_GEMFILE_LOCK_MD5=`md5sum ${DIR}/current/Gemfile.lock | cut -c1-32`;

    RELEASE_ASSETS_MD5=`find ${RELEASE_DIR}/app/assets -type f | sort | xargs md5sum | cut -c1-32 | md5sum | cut -c1-32`;
    RELEASE_FRONTEND_MD5=`find ${RELEASE_DIR}/app/javascript -type f | sort | xargs md5sum | cut -c1-32 | md5sum | cut -c1-32`;
    RELEASE_GEMFILE_LOCK_MD5=`md5sum ${RELEASE_DIR}/Gemfile.lock | cut -c1-32`;

    RELEASE_HASH="${RELEASE_ASSETS_MD5}${RELEASE_FRONTEND_MD5}${RELEASE_GEMFILE_LOCK_MD5}";
    CURRENT_HASH="${CURRENT_ASSETS_MD5}${CURRENT_FRONTEND_MD5}${CURRENT_GEMFILE_LOCK_MD5}";

    if [[ "$CURRENT_HASH" == "$RELEASE_HASH" ]]; then
	  echo '
-----> Skipping precompilation, shit looks the same...'
      cd $DIR/current/public/assets && tar -czvf $DIR/$RELEASE-assets.tar.gz .
      mkdir -p $RELEASE_DIR/public/assets;
      cd $DIR && tar -xvf $RELEASE-assets.tar.gz -C $RELEASE_DIR/public/assets;
      rm $DIR/$RELEASE-assets.tar.gz;
      cd $DIR/current/public/packs && tar -czvf $DIR/$RELEASE-packs.tar.gz .
      mkdir -p $RELEASE_DIR/public/packs;
      cd $DIR && tar -xvf $RELEASE-packs.tar.gz -C $RELEASE_DIR/public/packs;
      rm $DIR/$RELEASE-packs.tar.gz;
      cd $RELEASE_DIR;
    else
      echo '
-----> Unable to reuse assets.'
echo "-----> Release: $RELEASE_HASH; Current: $CURRENT_HASH";
echo '-----> Precompiling assets...'
       # Force webpack output so we can debug errors
       if [ -w config/webpacker.yml ]; then sed -i '/webpack_compile_output/ s/false/true/g' config/webpacker.yml; fi
       rbenv exec bundle exec rake assets:precompile
    fi
  fi

  if [ "$CRON" = true ]; then
    echo '
-----> Migrating database...'
    rbenv exec bundle exec rake db:migrate
  fi
fi

# Hanami apps
if grep -q '^  hanami' Gemfile.lock; then
  echo '
-----> Detected Hanami app.'

  echo '
-----> Precompiling assets...'
  rbenv exec bundle exec hanami assets precompile

  echo '
-----> Migrating database...'
  rbenv exec bundle exec hanami db migrate
fi

# Update cron jobs if needed; whenever must be in your Gemfile
if ([ "$CRON" = true ] && [ -f config/schedule.rb ])
then
  echo '
-----> Updating crontab...'
  if grep -q '^  whenever' Gemfile.lock; then
    rbenv exec bundle exec whenever -i %{name} --update-crontab --set 'environment=%{environment}'
  else
    echo '
Warning: Unable to install cron jobs. The 'whenever' gem is missing from your Gemfile. Please add it and re-deploy if you wish to install cron jobs.'
  fi
fi
